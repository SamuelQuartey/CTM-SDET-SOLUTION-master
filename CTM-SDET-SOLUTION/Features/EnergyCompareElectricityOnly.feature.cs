// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CTM_SDET_SOLUTION.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EnergyCompareElectricityOnlyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "EnergyCompareElectricityOnly.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EnergyCompareElectricityOnly", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "EnergyCompareElectricityOnly")))
            {
                CTM_SDET_SOLUTION.Features.EnergyCompareElectricityOnlyFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnergyComparisonJourney_ElectricityOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EnergyCompareElectricityOnly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Features")]
        public virtual void EnergyComparisonJourney_ElectricityOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnergyComparisonJourney_ElectricityOnly", new string[] {
                        "Features"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "PostCode",
                        "SupplierButtons"});
            table1.AddRow(new string[] {
                        "PE2 6YS",
                        "EDF Energy"});
#line 6
testRunner.Given("I have set Your Supplier Page ElectricityTab & Yes, I have no bill Tab", ((string)(null)), table1, "Given ");
#line 10
testRunner.And("Your Energy Page Electricity Only I don\'t know checkbox ticked", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "HomeSize",
                        "NumberOfPeople",
                        "sourceOfHeating",
                        "Temperature",
                        "Insulation",
                        "cookingEnergySource",
                        "timesAtHome"});
            table2.AddRow(new string[] {
                        "1-2 Bedrooms",
                        "3-4 Occupants",
                        "Gas heating",
                        "Temperate",
                        "Airtight",
                        "Electricity",
                        "Most of the time"});
#line 11
testRunner.And("I have set Your Energy Page Electricity only section with table information", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Tariffs",
                        "PaymentType",
                        "EmailAddress"});
            table3.AddRow(new string[] {
                        "Fixed tariff",
                        "All payment types",
                        "sam@sam-kings.com"});
#line 16
 testRunner.When("I set Your Preferences page with table information, checked all checkbox & click " +
                    "GoToPrices button", ((string)(null)), table3, "When ");
#line 19
 testRunner.Then("I am on Your Results page with message \"<Your Results>\" displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
